/////////////////////////////////////// SETUP ///////////////////////////////////////////

// Attach Sutherland's code to construct the labelling used in LMFDB and create the subgroup lattice
// for GSp4(F5) using that code.
Attach("GSp.m");
L := GSpLattice(4, 5, 0);

/////////////////////////////////////// LOCAL METHODS ///////////////////////////////////////////

// A local method for determining images is one based on sampling Frob_p

// Given a matrix M, this computes the dimension of the 1-eigenspace of M
MatrixOneEigenspace := function(M)
    eigenspace := Eigenspace(M, 1);
    return Dimension(eigenspace);
end function;

// Given a finite matrix group MG, returns a list of the invariant pairs (charpoly, dim 1-eigenspace)
// that occur in MG WITHOUT their multiplicity
InvariantsUncounted := function(MG)
    return {<CharacteristicPolynomial(M), MatrixOneEigenspace(M)> : M in MG};
end function;

// Given a finite matrix group MG, computes the invariant pairs (charpoly, dim 1-eigenspace)
// that occur in MG. Note we include multiplicity/count of each pair.
InvariantSpectrum := function(MG) // MG is a finite matrix group
    invariant_tuples := {*<CharacteristicPolynomial(M), MatrixOneEigenspace(M)>: M in MG*};
    return invariant_tuples;
end function;

// Given a subgroup lattice L, this constructs a dictionary. The keys are (charpoly, 1-eigenspace dim) pairs
// and the values are lists of indices representing which subgroups contain
// elements with those invariants. Note we only ever compute this on the subgroup lattice for GSp4(F5)
InvariantDictionary := function(L);
    num_subgroups := #L;
    dict := AssociativeArray();
    for grp in Keys(L) do
        invariants := InvariantsUncounted(L[grp]`subgroup);
        for invariant_tuple in invariants do
            if not IsDefined(dict, invariant_tuple) then
                dict[invariant_tuple] := {grp, "1.1.1"};
            else
                Include(~dict[invariant_tuple], grp);
            end if;
        end for;
    end for;
    return dict;
end function;

// Given two vectors in R^n, we compute the square of their Euclidean distance.
// This is Algorithm 3 in our paper.
SquareDifference := function(sampled, expected)
    S := 1/#sampled;
    E := 1/#expected;

    sum := 0;
    for elt in Set(expected) do
        if elt in Set(sampled) then
            sum := sum + (Multiplicity(expected, elt)*E - Multiplicity(sampled, elt)*S)^2;
        else
            sum := sum + (Multiplicity(expected, elt)*E)^2;
        end if;
    end for;
    return sum;
end function;


// Takes a genus 2 hyperelliptic curve X and an upper limit on the number of primes to sample (ie sample the primes p < upper_limit)
// and returns a list with the coefficients of the characteristic polynomial for each sampled frobenius element
// Currently configured to print the smalljac output into a file called "FOO_lpdata2"
RunSmalljac := function(X, upper_limit)
    // First ensure that the curve is simplified:
    C := SimplifiedModel(X);

    // Now extract the coefficients from the simplified curve
    f,_:= HyperellipticPolynomials(C);
    coeffs := Coefficients(f);
    a0 := coeffs[1];
    a1 := coeffs[2];
    a2 := coeffs[3];
    a3 := coeffs[4];
    a4 := coeffs[5];
    a5 := coeffs[6];

    // Run the curve through smalljac.
    // NOTE: the command may have to be changed depending on how smalljac is configured on your device
    if #coeffs eq 6 then
        command := Sprintf("~/lpdata2 %o \"%ox^5 + %ox^4 + %ox^3 + %ox^2 + %ox^1 + %o\" %o", FOO, a5,a4,a3,a2,a1,a0, upper_limit);
    else
        a6 := coeffs[7];
        command := Sprintf("~/lpdata2 %o \"%ox^6 + %ox^5 + %ox^4 + %ox^3 + %ox^2 + %ox^1 + %o\" %o", FOO, a6,a5,a4,a3,a2,a1,a0, upper_limit);
    end if;
    System(command);

    // Retrieve the data from the printed smalljac output file
    filename := Sprintf("%o_lpdata.txt", FOO);
    frobs := Split(Read(filename), "\n");
    return frobs;
end function;

// Given a finitely generated abelian group G, counts the copies of Z/ell Z in G
TorsionCounter := function(G, ell)
    decomp := Invariants(G);
    count := 0;
    for val in decomp do
        if (val mod ell) eq 0 then
            count := count + 1;
        end if;
    end for;
    return count;
end function;

// Checks the dimension of the 1-eigenspace of frob(p)
// Here p is the prime, C is the curve, ell the torsion subgroup of interest, and poly is the characteristic polynomial of frob(p)
OneSubspaceDim := function(p, C, ell, poly)
    // First we check if we can determine the dimension based solely on the characteristic polynomial:
    if Evaluate(poly, 1) ne 0 then
        return 0;
    end if;
    if [t[2] : t in Roots(poly) | t[1] eq 1][1] eq 1 then
        return 1; // 1 has algebraic multiplicity 1, so it has geometric multiplicity 1
    end if;

    // If we can't fully determine the dimension just from the characteristic polynomial then we look at
    // the curve C mod p
    Cp := ChangeRing(C, GF(p));
    Jp := Jacobian(Cp);
    return TorsionCounter(AbelianGroup(Jp), ell);
end function;


//////////////////////////////////////// GLOBAL METHODS ///////////////////////////////////////////

// A global method for determining the image of galois is 
// a method which looks at the curve over Q, or an extension thereof

// Function checks if a subgroup of GSp4(F5) has a common 1-eigenspace
HasRationalTorsion := function(group_label)
    return L[group_label]`orbits[1][2] eq 1;
end function;

// For a prime ell, returns a list of all vectors in (Z/ell Z)^m
function MakeAllVecs(m, ell)
    if m eq 1 then
        return [[k] : k in [0..(ell-1)]];
    end if;

    acc := [];
    for j in [0..(ell-1)] do
        acc := acc cat [[j] cat s : s in MakeAllVecs(m-1, ell)];
    end for;

    return acc;
end function;

// For a prime ell, returns a list with one representative of each 1D subspace in (Z/ell Z)^n
function MakeLineReps(n, ell)
    if n eq 1 then
        return [[1]];
    end if;
    
    new_stuff := [[1] cat s : s in MakeAllVecs(n-1, ell)];
    old_stuff := [[0] cat s : s in MakeLineReps(n-1, ell)];
    
    return new_stuff cat old_stuff;
end function;


// Function checks if a subgroup has a common 1-subspace which is always a 1- or (-1)-eigenspace    
HasQuadraticTorsion := function(group_label, ell)
    if not(2 in {orbit[2] : orbit in L[group_label]`orbits}) then
        return false;
    end if;
    
    if [orbit[3] : orbit in L[group_label]`orbits | orbit[2] eq 2][1] lt 12 then
        return true;
    end if;

    ListToVerticalVector := function(list, ell)
        return Transpose(Matrix(Vector(IntegerRing(ell), list)));
    end function;

    possible_subspaces := MakeLineReps(4, ell);
    for gen in Generators(L[group_label]`subgroup) do
        possible_subspaces := [subspace : subspace in possible_subspaces |
            (gen * ListToVerticalVector(subspace, ell) eq ListToVerticalVector(subspace, ell)) 
            or (gen * ListToVerticalVector(subspace, ell) eq (-1) * ListToVerticalVector(subspace, ell)) ];
        if #possible_subspaces eq 0 then
            return false;
        end if;
    end for;
    return true;
end function;


// Initializes possibilities for which quadratic extensions of Q(sqrt(d))/Q might have additional 5-torsion.
// This is Step 1 in Algorithm 4
PlausibleDees := function(conductor)
    prime_factors := {tuple[1] : tuple in Factorization(conductor)};
    Include(~prime_factors, -1);

    candidates := {&*s : s in Subsets(prime_factors) | &*s ne 1};
    
    if conductor mod 2 eq 0 then
        return candidates;
    else
        // candidate number fields cannot ramify 2
        return {dee : dee in candidates | dee mod 4 eq 1};
    end if;
end function;

// Given Q(sqrt(d))/Q compute the discriminant
DiscFromDee := function(d)
    if d mod 4 eq 1 then
        return d;
    else
        return 4 * d;
    end if;
end function;

// Checks if a curve C could have additional 5-torsion over a quadratic extension Q(sqrt(d))/Q.
// Returns true if no quadratic torsion guaranteed.
// Returns false if we might have additional 5-torsion over a quadratic extension.
// In this case, we also return the set {d : Q(sqrt(d)) might have 5-torsion}
// This is Algorithm 4 in our paper
ImpossibleQuadraticTorsion := function(C, frob_polys_list)
candidates := PlausibleDees(Conductor(C));
for frob_poly in frob_polys_list do
    if Coefficients(frob_poly)[1] lt 49 then
        continue;
    end if;
    p := Integers()!Sqrt(Coefficients(frob_poly)[1]);
    if Evaluate(frob_poly, 1) ne 0 then // no 5-torsion over Fp
        candidates := {d : d in candidates | KroneckerSymbol(DiscFromDee(d), p) ne 1};
    end if;
    
    if #candidates eq 0 then
        return true, candidates;
    end if;
end for;

return false, candidates;
end function;




function LinearCombo(vecs, scalars, ell)
// vecs is a basis for the lattice of the analytic Jacobian, and scalars is an element in the vector-space
// formulation of the torsion points. This function returns the torsion point corresponding to scalars
// in the analytic jacobian
    acc := scalars[1] * vecs[1];
    for j in [2..#vecs] do
        acc := acc + scalars[j] * vecs[j];
    end for;
    return acc/ell;
end function;


MumfordFromCoords := function(points, f)
// Given points [(x1,y1),(x2,y2)] on a dimension 2 jacobian we recover the mumford coordinates
// These are presented in the form (x^2+alpha*x+beta, gamma*x+delta)
// Requires reduced divisors of degree 1 or 2. Do not feed in the identity or unreduced divisors.
    if #points eq 2 then // degree 2 divisor
        x1 := points[1][1];
        y1 := points[1][2];
        x2 := points[2][1];
        y2 := points[2][2];

        alpha := -(x1 + x2);
        beta := x1*x2;

        // special case when the divisor is of the form (2P - 2âˆž)
        if Abs(x1 - x2) lt 10^(-10) then // threshold for floating point error
            fprime := Derivative(f);
            gamma := Evaluate(fprime, x1) / (2*y1);
            delta := y1 - gamma * x1;
        else // the generic case
            gamma := (y2-y1)/(x2-x1);
            delta := (y1*x2-y2*x1)/(x2-x1);
        end if;

        return <alpha, beta, gamma, delta>;
    elif #points eq 1 then // degree 1 divisor, (u, v) = (x-x1, y1)
        return points[1];  
    end if;
    
    fprintf std_err, "MumfordFromCoords recieved %o points\n", #points; // I think we should remove this since I don't think std_err will work in general -Andy
    return <>;
end function;

// Given a genus 2 curve and an ell, computes the ell-torsion of the Jacobian over C and
// returns one point in each line (line = copy of Z/ellZ = 1D subspace)
function CTorsion(C, ell)
    CF<i> := ComplexField(PRECISION); // sort out precision stuff -Andy

    Cx<x> := PolynomialRing(CF);
    f := -Evaluate(DefiningPolynomial(C), [x, 0, 1]);
    A := AnalyticJacobian(f);
    M := BigPeriodMatrix(A);

    v1 := Matrix(CF, 2, 1, [M[1][1],M[2][1]]);
    v2 := Matrix(CF, 2, 1, [M[1][2],M[2][2]]);
    v3 := Matrix(CF, 2, 1, [M[1][3],M[2][3]]);
    v4 := Matrix(CF, 2, 1, [M[1][4],M[2][4]]);

    line_reps := MakeLineReps(4,5);
    
    analytic_torsion_points := [LinearCombo([v1, v2, v3, v4], line_reps[j], ell) : j in [1..156]];
    algebraic_torsion_points := [**];
    for pt in analytic_torsion_points do
        try 
            Append(~algebraic_torsion_points, FromAnalyticJacobian(pt, A));
        catch e 
            Append(~algebraic_torsion_points, FromAnalyticJacobian(2*pt, A));
            fprintf std_err, "Doubling trick saved %o!\n", C;
        // we need degree 2 divisors for Magma to be happy with list comprehension so if this is not the case
        // we double the point to get a degree two divisor
        end try;
    end for;
    
    return [*MumfordFromCoords(pt, f) : pt in algebraic_torsion_points*];
end function;


// CFE stands for continued fraction expansion. We can write any real number as a + (1/(b+1/(c+...)))


// we need a helper function which eats a full CFE (as a sequence) and a length n and returns the
// corresponding rational number which we get by expanding the first n coefficients in the CFE
function ExpandCFE(CFE, n)
    if n eq 1 then
        return CFE[1];
    else
        return CFE[1] + 1/(ExpandCFE(CFE[2..n],n-1));
    end if;
end function;

// The input val is a real number which we computed to be a mumford coefficient
// The input h is a height = max(numerator, denominator) bound on what is permissible for a 5-torsion point
// The input err is a bound on the possible error of the FromAnalyticJacobian computation
// The output is the computed CFE for val as well as the list of possible lengths. This may be empty!
function RoundVal(val, h, err)
    CFE = ContinuedFraction(val);
    allowed_err_lengths := [];
    allowed_height_lengths := [];
    for n in [1..#CFE] do
        approx := ExpandCFE(CFE,n);
        err_bool := Abs(approx - val) le err;
        height_bool := Max(Abs(Numerator(approx)), Abs(Denominator(approx)));

        if err_bool then
            Append(~allowed_err_lengths, n);
        end if;
        if height_bool then
            Append(~allowed_height_lengths, n);
        end if;

    // We want to check if there are any allowable rational approximations. There are no allowable rational approximations when
    // min(allowed_err) - max(allowed_heights) > 1
    if (min(allowed_err_lengths) - max(allowed_height_lengths)) gt 1 then
        return CFE, [];
    elif (min(allowed_err_lengths) - max(allowed_height_lengths)) eq 1 then
        return CFE, [max(allowed_height_lengths), min(allowed_err_lengths)]
    else
        return CFE, [i : i in [min(allowed_err_lengths)..max(allowed_height_lengths)]]
end function;


// left off here -Andy


// Precondition: CFE (continued fraction expansion) has an element greater than THRESHOLD
// Note: CFE stands for continued fraction expansion. We can write any real number as a + (1/(b+1/(c+...)))
// The input is a sequence of coefficients corresponding the the values in the CFE for a real number
// The other input, height, is a height bound

function RoundCFE(CFE)
    if #CFE eq 2 then
        return CFE[1];
    if CFE[2] gt THRESHOLD then
        return CFE[1];
    else
        return CFE[1] + 1 / RoundCFE(CFE[[2..#CFE]]);
    end if;
end function;

// Given a good point, returns abgd rational such that u = x^2+ax+b and v = sqrt(dee)*(gx+d)
// For degree 1 divisor, returns ab rational such that u = x - a and v = sqrt(dee)*b
function RoundPoint(pt, dee)
    if #pt eq 4 then
        a := Re(pt[1]);
        b := Re(pt[2]);
        if dee lt 0 then
            g := Im(pt[3]) / Sqrt(Abs(dee));
            d := Im(pt[4]) / Sqrt(Abs(dee));
        else
            g := Re(pt[3]) / Sqrt(Abs(dee));
            d := Re(pt[4]) / Sqrt(Abs(dee));
        end if;
        a := RoundCFE(ContinuedFraction(a*FUDGE));
        b := RoundCFE(ContinuedFraction(b*FUDGE));
        g := RoundCFE(ContinuedFraction(g*FUDGE));
        d := RoundCFE(ContinuedFraction(d*FUDGE));
        return <a,b,g,d>;
    elif #pt eq 2 then
        a := Re(pt[1]);
        if dee lt 0 then
            b := Im(pt[2]) / Sqrt(Abs(dee));
        else
            b := Re(pt[2]) / Sqrt(Abs(dee));
        end if;
        a := RoundCFE(ContinuedFraction(a*FUDGE));
        b := RoundCFE(ContinuedFraction(b*FUDGE));
        return <a, b>;
    end if;
    fprintf std_err, "RoundPoint recieved mumford coord tuple with %o values\n", #pt;
    return <>;
end function;

// Checks whether the continued fraction expansion of a real number r has term greater than THRESHOLD
function NearlyRational(r)
    if Abs(r) lt ZEROISH then 
        return true;
    end if;
    
    // the idea is that if r is EXACTLY an integer/neat fraction,
    // this will add a big term to its CFE
    r := r * FUDGE;
    
    for n in ContinuedFraction(r) do
        if n gt THRESHOLD then
            return true;
        end if;
    end for;
    return false;
end function;

// takes in <alpha, beta, gamma, delta> and d and tells whether <alpha, beta, gamma, delta> 
// could plausibly be the mumford coordinates of a torsion point over Q(sqrt(d))
function PlausiblePoint(pt, dee)
    if #pt eq 4 then // degree 2 divisor
        if (dee lt 0) and Abs(Im(pt[1]))+Abs(Im(pt[2]))+Abs(Re(pt[3]))+Abs(Re(pt[4])) lt ZEROISH then
            a := Re(pt[1]);
            b := Re(pt[2]);
            g := Im(pt[3]) / Sqrt(Abs(dee));
            d := Im(pt[4]) / Sqrt(Abs(dee));
            return NearlyRational(a) and NearlyRational(b) and NearlyRational(g) and NearlyRational(d);

        elif (dee gt 0) and Abs(Im(pt[1]))+Abs(Im(pt[2]))+Abs(Im(pt[3]))+Abs(Im(pt[4])) lt ZEROISH then
            a := Re(pt[1]);
            b := Re(pt[2]);
            g := Re(pt[3]) / Sqrt(Abs(dee));
            d := Re(pt[4]) / Sqrt(Abs(dee));
            return NearlyRational(a) and NearlyRational(b) and NearlyRational(g) and NearlyRational(d);
        end if;
    
        return false;
    elif #pt eq 2 then // degree 1 divisor
        if (dee lt 0) and Abs(Im(pt[1]))+Abs(Re(pt[2])) lt ZEROISH then
            a := Re(pt[1]);
            b := Im(pt[2]) / Sqrt(Abs(dee));
            return NearlyRational(a) and NearlyRational(b);
        elif (dee gt 0) and Abs(Im(pt[1]))+Abs(Im(pt[2])) lt ZEROISH then
            a := Re(pt[1]);
            b := Re(pt[2]) / Sqrt(Abs(dee));
            return NearlyRational(a) and NearlyRational(b);
        end if;
        
        return false;
    end if;
    
    fprintf std_err, "PlausiblePoint recieved mumford coord tuple with %o values\n", #pt;
    return false;
end function;

// Given pt = <a, b, g, d> with abgd rational, tells whether 
// (u, v) = (x^2+ax+b, sqrt(dee)*(gx+d)) is a 5-torsion point on the curve C
// OR takes pt = <a, b> with ab rational and tells whether
// (u, v) = (x-a, sqrt(d)*b) is a 5-torsion point
function Is5Torsion(pt, dee, C)
    _<x> := PolynomialRing(Rationals());
    K<sqrtdee> := NumberField(x^2-dee);
    Kx<xK> := PolynomialRing(K);
    CK := ChangeRing(C, K);
    JK := Jacobian(CK);
    
    if #pt eq 4 then
        a := pt[1];
        b := pt[2];
        g := pt[3];
        d := pt[4];

        // See if 5*pt is Id, with the understanding that coersion may fail
        try
            return 5 * (JK ! [xK^2 + a*xK + b, sqrtdee*(g*xK + d)]) eq Id(JK);
        catch e
            fprintf std_err, "Is5Torsion decided no, given %o, %o, %o as input \n", pt, dee, C;
            return false;
        end try;
    elif #pt eq 2 then
        a := pt[1];
        b := pt[2];
        
        // See if 5*pt is Id, with the understanding that coersion may fail
        try
            return 5 * (JK ! [xK - a, sqrtdee*b]) eq Id(JK);
        catch e
            fprintf std_err, "Is5Torsion decided no, given %o, %o, %o as input \n", pt, dee, C;
            return false;
        end try;
    end if;
    
    fprintf std_err, "Is5Torsion recieved mumford coord tuple with %o values\n", #pt;
    return false;
end function;

// Determines whether the curve C : y^2=f(x) has 5 torsion in Q(sqrt(dee))
// true is always correct, and accompanied by a witness 5-torsion point
// false may not be correct, although this is unlikely. False negatives can
// be caused by extremely large 5-torsion (large in the height sense)
function Has5Torsion(C, dee)
    all_torsion := CTorsion(C, 5);
    good_torsion := [*RoundPoint(pt, dee) : pt in all_torsion | PlausiblePoint(pt, dee)*];
    
    for pt in good_torsion do
        if Is5Torsion(pt, dee, C) then
            return true, pt;
        end if;
    end for;
    return false;
end function;
