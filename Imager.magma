////////////////////////////////////// CONSTANTS ///////////////////////////////////////

// Where to write error messages which shouldn't cause termination (stays separate from smalljac output)
STD_ERR := "errors.txt";
// "w" to overwrite, "a" to append
MODE := "w";

std_err := Open(STD_ERR, MODE); // we do this here so that any function can see this name

// the temp file Smalljac writes to
// Note: the lack of .txt in our example name is intentional.
FOO := "temp";

// the range of p for which Frob_p will be sampled
PRIMES_LOWER_LIMIT := 10000;
PRIMES_UPPER_LIMIT := 20000;

// The minimal number of decimal digits to use in computations
// related to inverting Abel-Jacobi. Lower values lead to more
// frequent errors during inversion. We do not know why these
// errors occur in the first place. High precisions may cause
// the computation to stall.
MIN_PRECISION := 200;

/////////////////////////////////////// SETUP ///////////////////////////////////////////

// Attach Sutherland's code to construct the labelling used in LMFDB and create the subgroup lattice
// for GSp4(F5) using that code.
Attach("GSp.m");
L := GSpLattice(4, 5, 0);

// Per Chidambaram, any images should have an order 2 element with similitude character -1
// corresponding to complex conjugation. This function takes a group label and checks if it
// meets this criterion.
function possible_image(label)
    M := Matrix(IntegerRing(5), [[0, 0, 0, 1], 
                [0, 0, 1, 0], 
                [0, 4, 0, 0],
                [4, 0, 0,0]]); // this is the explicit symplectic form
    for elt in L[label]`subgroup do
        elt_ord := Order(elt);
        sim_character := (Transpose(elt)*M*elt)[1,4];
        // per chidambaram we need to check for existence of an order two element with similitude character -1
        if (elt_ord eq 2) and (sim_character eq 4) then
            return true;
        end if;
    end for;
    return false;
end function;

// compute the allowed subgroups:
chidambaram_allowed := ["1.1.1"];
for sbgrp in Keys(L) do
    if sbgrp eq "1.1.1" then
        continue;
    end if;
    if possible_image(sbgrp) then
        Include(~chidambaram_allowed, sbgrp);
    end if;
end for;

/////////////////////////////////////// LOCAL METHODS ///////////////////////////////////////////

// A local method for determining images is one based on sampling Frob_p

// Given a matrix M, this computes the dimension of the 1-eigenspace of M
MatrixOneEigenspace := function(M)
    eigenspace := Eigenspace(M, 1);
    return Dimension(eigenspace);
end function;

// Given a finite matrix group MG, returns a list of the invariant pairs (charpoly, dim 1-eigenspace)
// that occur in MG WITHOUT their multiplicity
InvariantsUncounted := function(MG)
    return {<CharacteristicPolynomial(M), MatrixOneEigenspace(M)> : M in MG};
end function;

// Given a finite matrix group MG, computes the invariant pairs (charpoly, dim 1-eigenspace)
// that occur in MG. Note we include multiplicity/count of each pair.
InvariantSpectrum := function(MG) // MG is a finite matrix group
    invariant_tuples := {*<CharacteristicPolynomial(M), MatrixOneEigenspace(M)>: M in MG*};
    return invariant_tuples;
end function;

// Given a subgroup lattice L, this constructs a dictionary. The keys are (charpoly, 1-eigenspace dim) pairs
// and the values are lists of indices representing which subgroups contain
// elements with those invariants. Note we only ever compute this on the subgroup lattice for GSp4(F5)
InvariantDictionary := function(L);
    num_subgroups := #L;
    dict := AssociativeArray();
    for grp in Keys(L) do
        invariants := InvariantsUncounted(L[grp]`subgroup);
        for invariant_tuple in invariants do
            if not IsDefined(dict, invariant_tuple) then
                dict[invariant_tuple] := {grp, "1.1.1"};
            else
                Include(~dict[invariant_tuple], grp);
            end if;
        end for;
    end for;
    return dict;
end function;

// Given two vectors in R^n, we compute the square of their Euclidean distance.
// This is Algorithm 3 in our paper.
SquareDifference := function(sampled, expected)
    S := 1/#sampled;
    E := 1/#expected;

    sum := 0;
    for elt in Set(expected) do
        if elt in Set(sampled) then
            sum := sum + (Multiplicity(expected, elt)*E - Multiplicity(sampled, elt)*S)^2;
        else
            sum := sum + (Multiplicity(expected, elt)*E)^2;
        end if;
    end for;
    return sum;
end function;


// Takes a genus 2 hyperelliptic curve X and an upper limit on the number of primes to sample (ie sample the primes p < upper_limit)
// and returns a list with the coefficients of the characteristic polynomial for each sampled frobenius element
// Currently configured to print the smalljac output into a file called "FOO_lpdata2"
RunSmalljac := function(X, upper_limit)
    // First ensure that the curve is simplified:
    C := SimplifiedModel(X);

    // Now extract the coefficients from the simplified curve
    f,_:= HyperellipticPolynomials(C);
    coeffs := Coefficients(f);
    a0 := coeffs[1];
    a1 := coeffs[2];
    a2 := coeffs[3];
    a3 := coeffs[4];
    a4 := coeffs[5];
    a5 := coeffs[6];

    // Run the curve through smalljac.
    // NOTE: the command may have to be changed depending on how smalljac is configured on your device
    if #coeffs eq 6 then
        command := Sprintf("~/lpdata2 %o \"%ox^5 + %ox^4 + %ox^3 + %ox^2 + %ox^1 + %o\" %o", FOO, a5,a4,a3,a2,a1,a0, upper_limit);
    else
        a6 := coeffs[7];
        command := Sprintf("~/lpdata2 %o \"%ox^6 + %ox^5 + %ox^4 + %ox^3 + %ox^2 + %ox^1 + %o\" %o", FOO, a6,a5,a4,a3,a2,a1,a0, upper_limit);
    end if;
    System(command);

    // Retrieve the data from the printed smalljac output file
    filename := Sprintf("%o_lpdata.txt", FOO);
    frobs := Split(Read(filename), "\n");
    return frobs;
end function;

// Given a finitely generated abelian group G, counts the copies of Z/ell Z in G
TorsionCounter := function(G, ell)
    decomp := Invariants(G);
    count := 0;
    for val in decomp do
        if (val mod ell) eq 0 then
            count := count + 1;
        end if;
    end for;
    return count;
end function;

// Checks the dimension of the 1-eigenspace of frob(p)
// Here p is the prime, C is the curve, ell the torsion subgroup of interest, and poly is the characteristic polynomial of frob(p)
OneSubspaceDim := function(p, C, ell, poly)
    // First we check if we can determine the dimension based solely on the characteristic polynomial:
    if Evaluate(poly, 1) ne 0 then
        return 0;
    end if;
    if [t[2] : t in Roots(poly) | t[1] eq 1][1] eq 1 then
        return 1; // 1 has algebraic multiplicity 1, so it has geometric multiplicity 1
    end if;

    // If we can't fully determine the dimension just from the characteristic polynomial then we look at
    // the curve C mod p
    Cp := ChangeRing(C, GF(p));
    Jp := Jacobian(Cp);
    return TorsionCounter(AbelianGroup(Jp), ell);
end function;


//////////////////////////////////////// GLOBAL METHODS ///////////////////////////////////////////

// A global method for determining the image of galois is 
// a method which looks at the curve over Q, or an extension thereof

// Function checks if a subgroup of GSp4(F5) has a common 1-eigenspace
// the group label should be input as a string, eg HasRationalTorsion("5.624.1")
HasRationalTorsion := function(group_label)
    return L[group_label]`orbits[1][2] eq 1;
end function;

// For a prime ell, returns a list of all vectors in (Z/ell Z)^m
function MakeAllVecs(m, ell)
    if m eq 1 then
        return [[k] : k in [0..(ell-1)]];
    end if;

    acc := [];
    for j in [0..(ell-1)] do
        acc := acc cat [[j] cat s : s in MakeAllVecs(m-1, ell)];
    end for;

    return acc;
end function;

// For a prime ell, returns a list with one representative of each 1D subspace in (Z/ell Z)^n
function MakeLineReps(n, ell)
    if n eq 1 then
        return [[1]];
    end if;
    
    new_stuff := [[1] cat s : s in MakeAllVecs(n-1, ell)];
    old_stuff := [[0] cat s : s in MakeLineReps(n-1, ell)];
    
    return new_stuff cat old_stuff;
end function;

// Function checks if a subgroup has a (1, (-1))-group eigenspace    
HasQuadraticTorsion := function(group_label, ell)
    if not(2 in {orbit[2] : orbit in L[group_label]`orbits}) then
        return false;
    end if;
    
    if [orbit[3] : orbit in L[group_label]`orbits | orbit[2] eq 2][1] lt 12 then
        return true;
    end if;

    ListToVerticalVector := function(list, ell)
        return Transpose(Matrix(Vector(IntegerRing(ell), list)));
    end function;

    possible_subspaces := MakeLineReps(4, ell);
    for gen in Generators(L[group_label]`subgroup) do
        possible_subspaces := [subspace : subspace in possible_subspaces |
            (gen * ListToVerticalVector(subspace, ell) eq ListToVerticalVector(subspace, ell)) 
            or (gen * ListToVerticalVector(subspace, ell) eq (-1) * ListToVerticalVector(subspace, ell)) ];
        if #possible_subspaces eq 0 then
            return false;
        end if;
    end for;
    return true;
end function;

// Given vectors {v1,...,vn} and scalars {c1,...,cn} returns the linear combination of those vectors scaled by
// the constant 1/ell. Explicitly, it returns:
// (1/ell)*(c1*v1 + c2*v2 + ... cn*vn)
function LinearCombo(vecs, scalars, ell)
    acc := scalars[1] * vecs[1];
    for j in [2..#vecs] do
        acc := acc + scalars[j] * vecs[j];
    end for;
    return acc/ell;
end function;

// The quadrartic fields which are not precluded from containing l-torsion
// by Theorem 1.5 of Melistas's paper
// This is Step 1 in Algorithm 4
PlausibleDees := function(conductor)
    prime_factors := {tuple[1] : tuple in Factorization(conductor)};
    Include(~prime_factors, -1);

    candidates := {&*s : s in Subsets(prime_factors) | &*s ne 1};
    
    if conductor mod 2 eq 0 then
        return candidates;
    else
        // candidate number fields cannot ramify 2
        return {dee : dee in candidates | dee mod 4 eq 1};
    end if;
end function;

// Given Q(sqrt(d))/Q compute the discriminant
DiscFromDee := function(d)
    if d mod 4 eq 1 then
        return d;
    else
        return 4 * d;
    end if;
end function;


// This is Algorithm 4 in our paper
// This function takes in a curve C and a list of frobenius polynomials frobs (obtained from
// the prior function "runsmalljac") and determines if the curve C could have additional 5-torsion over
// a quadratic extension. If this is impossible, the function returns true. If there could be 5-torsion
// over some quadratic extension, the function returns false and a list of candidates
// {d : Q(sqrt(d)) might have additional 5-torsion}
ImpossibleQuadraticTorsion := function(C, frobs)
    candidates := PlausibleDees(Conductor(C));
    
    for i->elt in frobs do
        // first check the characteristic polynomial
        frobpoly := Split(elt, ",");
        if #frobpoly eq 2 then
            assert frobpoly[2] eq "?"; //missing data, bad prime
            continue;
        end if;
        p := eval frobpoly[1];
        if p lt 7 then
            continue;
        end if;
        ap := eval frobpoly[2];
        bp := eval frobpoly[3];
        
        S := PolynomialRing(IntegerRing(5));
        frob_poly := S![p^2, p*ap, bp, ap, 1];
        
        if Evaluate(frob_poly, 1) ne 0 then // no 5-torsion over Fp
            candidates := {d : d in candidates | KroneckerSymbol(DiscFromDee(d), p) ne 1};
        end if;
        
        if #candidates eq 0 then
            return true, candidates;
        end if;
    end for;
    
    return false, candidates;
end function;

// HELPER FOR ALGORITHM 5
// Best rational approximation for r with denominator bounded by H
// Using result of stack exchange user Stingy: https://math.stackexchange.com/questions/856861/semi-convergent-of-continued-fractions
// Alternatively, this is on page 22 of Khinchin's Continued Fractions
function BestApproximation(r, H)
    // Generate continued fraction expansion
    CFE := ContinuedFraction(r);
    
    // Compute truncations alpha and beta which are last acceptable and first unacceptable
    den := 1;
    num_terms := 1; // will become number of terms in *beta*
    while (den lt H) and (num_terms lt #CFE) do
        num_terms := num_terms+1;
        den := Denominator(ContinuedFractionValue(CFE[1..num_terms]));  
    end while;
    
    // Compute whether smallest semiconvergent from beta is acceptable
    // If not, return alpha
    
    smallest_semi := ContinuedFractionValue(Append(CFE[1..(num_terms-1)], Ceiling(CFE[num_terms]/2)));
    alpha := ContinuedFractionValue(CFE[1..(num_terms - 1)]);
    if Denominator(smallest_semi) gt H then
        return alpha;
    elif Denominator(smallest_semi) eq H then
        if Abs(smallest_semi - r) lt Abs(alpha - r) then
            return smallest_semi;
        else
            return alpha;
        end if;
   end if;
    
    // Otherwise, perform binary search
    // Specifically, let L and R denote lower and upper bounds on last denominator
    L := Ceiling(CFE[num_terms]/2);
    R := CFE[num_terms];
    while L lt R do
        M := Ceiling((L+R)/2);
        // If M acceptable, L=M. Otherwise, R=M-1
        if Denominator(ContinuedFractionValue(Append(CFE[1..(num_terms-1)], M))) le H then
            L := M;
        else
            R := M-1;
        end if;
    end while;
    
    return ContinuedFractionValue(Append(CFE[1..(num_terms-1)], L)); // equivalently, R
end function;

// ALGORITHM 5
// Takes a complex number z and a height bound H. Computes whether z 
// has a rational approx q with height bounded by H and error, measured
// as max(|Im(z)|, |Re(z) - q|), bounded by 1/(2H^2).
function NearlyRational(z, H)
    epsilon := 1/(2*H^2);
    
    if Abs(Im(z)) gt epsilon then
        return [];
    end if;
    r := Re(z);
    
    q := BestApproximation(r, H);
    
    if Abs(q - r) le epsilon and Abs(Numerator(q)) le H then
        return [q];
    end if;
    
    return [];
end function;

// Input: a sequence or set of 2-tuples (item, count) encoding a multiset
// Output: A sequence obtained by unwrapping the multiset into its individual elements
MultisetToSequence := function(multiset)
    items := [];
    for multiitem in multiset do
        items := items cat [multiitem[1] : x in [1..multiitem[2]]];
    end for;
    return items;
end function;

// Given a degree 6 polynomial, returns all factorizations of it into cubics
CubicPairs6 := function(f)
    C<i> := ComplexField(20);
    P<x> := PolynomialRing(C);
    f := P!f;
    roots_w_mult := Roots(f);
    roots := MultisetToSequence(roots_w_mult);
    
    pairs := [];
    for j in [2..5] do
        for k in [j+1..6] do
            sigma_f := (x-roots[1])*(x-roots[j])*(x-roots[k]);
            tau_f, r := Quotrem(f, sigma_f);
            Append(~pairs, <sigma_f, tau_f>);
        end for;
    end for;
    return pairs;
end function;

// Given a degree 5 polynomial, returns all factorizations of it into a cubic and a quadratic
CubicPairs5 := function(f)
    C<i> := ComplexField(20);
    P<x> := PolynomialRing(C);
    f := P!f;
    roots_w_mult := Roots(f);
    roots := MultisetToSequence(roots_w_mult);
    
    pairs := [];
    for i in [1..3] do
        for j in [i+1..4] do
            for k in [j+1..5] do
                sigma_f := (x-roots[i])*(x-roots[j])*(x-roots[k]);
                tau_f, r := Quotrem(f, sigma_f);
                Append(~pairs, <sigma_f, tau_f>);
            end for;
        end for;
    end for;
    return pairs;
end function;

// This calculates the quantity R which is used in formulas 10.3 and 10.4 of Stoll's paper
// It miraculously works for both degree 5 and degree 6 polynomials without separate casework
function PairDiscriminant(pair)
    // We are going to factor out leading terms to make the two polynomials monic
    // Starting acc as below counterbalances that normalization appropriately
    acc := (LeadingCoefficient(pair[2])*LeadingCoefficient(pair[1]))^3;
    
    for ai in MultisetToSequence(Roots(pair[1])) do
        for aj in MultisetToSequence(Roots(pair[2])) do
            // beta_i=0 terms are skipped in the degree 5 case, but 
            // *because we normalized to monic*, they would only induce 
            // multiplication by 1, so that is fine. 
            acc := acc * (ai-aj); 
        end for;
    end for;
    return acc;
end function;


// Computes the a_(i, {S, S'})'s in equation 7.1 of Stoll's paper, 
// for a fixed factorization into cubics
Ai := function(pair)
    // recall that the index on sigma indicates the power of Z, not the power of X
    sigma3 := Coefficient(pair[1], 0);
    sigma2 := Coefficient(pair[1], 1);
    sigma1 := Coefficient(pair[1], 2);
    sigma0 := Coefficient(pair[1], 3);
    tau3 := Coefficient(pair[2], 0);
    tau2 := Coefficient(pair[2], 1);
    tau1 := Coefficient(pair[2], 2);
    tau0 := Coefficient(pair[2], 3);
    R := PairDiscriminant(pair);
    
    a1 := -1/(4*PairDiscriminant(pair)) * (sigma1*tau0 - sigma0*tau1);
    a2 := -1/(4*PairDiscriminant(pair)) * (sigma3*tau0 - sigma0*tau3 + sigma2*tau1 - sigma1*tau2);
    a3 := -1/(4*PairDiscriminant(pair)) * (sigma3*tau2 - sigma2*tau3);
    a4 := -1/(4*PairDiscriminant(pair)) * (sigma1*sigma3^2*tau0^2*tau2 - sigma0^2*sigma2*tau1*tau3^2 + sigma1*sigma2*tau1*tau2*(sigma3*tau0 - sigma0*tau3)- sigma3*tau3*(sigma1*sigma2*tau0^2 - sigma0^2*tau1*tau2) - sigma1*tau1*(sigma2^2*tau0*tau3 - sigma0*sigma3*tau2^2)- sigma1^2*sigma3*tau0*tau2^2 + sigma0*sigma2^2*tau1^2*tau3 + 4*sigma1*sigma3*tau1*tau3*(sigma1*tau0 - sigma0*tau1)+ sigma2*tau2*(sigma1^2*tau0*tau3 - sigma0*sigma3*tau1^2) - sigma0*tau0*(sigma3^2*tau1*tau2 + tau3^2*sigma1*sigma2)+ sigma0*tau0*(4*sigma3*tau3*(sigma3*tau0 - sigma0*tau3) + 4*sigma2*tau2*(sigma3*tau2 - sigma2*tau3)- 3*sigma3*tau3*(sigma2*tau1 - sigma1*tau2)));
    
    return [a1, a2, a3, a4];
end function;

// Computes the b_({S, S'}, j)'s in formula 7.1
Bj := function(pair)
    // recall that the index on sigma indicates the power of Z, not the power of X
    sigma3 := Coefficient(pair[1], 0);
    sigma2 := Coefficient(pair[1], 1);
    sigma1 := Coefficient(pair[1], 2);
    sigma0 := Coefficient(pair[1], 3);
    tau3 := Coefficient(pair[2], 0);
    tau2 := Coefficient(pair[2], 1);
    tau1 := Coefficient(pair[2], 2);
    tau0 := Coefficient(pair[2], 3);
    
    b0 := -((sigma3*tau0 + sigma0*tau3)^2 + 2*(sigma1*sigma2*tau0*tau3 + sigma0*sigma3*tau1*tau2)+ 3*(sigma1*sigma3*tau0*tau2 + sigma0*sigma2*tau1*tau3) + 5*(sigma2*sigma3*tau0*tau1 + sigma0*sigma1*tau2*tau3));
    b1 := sigma3*tau1 + sigma1*tau3;
    b2 := -(sigma3*tau0 + sigma0*tau3);
    b3 := sigma2*tau0 + sigma0*tau2;
    b4 := 1;
    
    return [b0, b1, b2, b3, b4];
end function;

// In Sto99, the bound on the contribution from an archimedean place
// is Log of a formula in terms of Ai's and bj's. This function calculates
// that formula.
BoundFromAisBjs := function(ais, bjs)
    ibounds := [];
    for i in [1..4] do
        ibound := 0;
        for ssprime in [1..#ais] do
            bterm := 0;
            for j in [0..4] do
                bterm := bterm + Abs(bjs[ssprime][j+1]); // j+1 because magma sequences are 1-indexed
            end for;
            bterm := Sqrt(bterm);
            ibound := ibound + Abs(ais[ssprime][i])*bterm;
        end for;
        ibound := ibound^2;
        Append(~ibounds, ibound);
    end for;
    return Max(ibounds);
end function;

// Given a degree 5 or 6 polynomial with integer coefs, computes 
// the contibution of the infinite places of Q(sqrt(d)) to the 
// bound on the naive height of torsion on the jacobian of the 
// associated curve
InfiniteContribution := function(f)
    C<i> := ComplexField(20);
    P<x> := PolynomialRing(C);
    f := P!f;

    if Degree(f) eq 5 then
        pairs := CubicPairs5(f);
    else
        pairs := CubicPairs6(f);
    end if;

    AllAs := [];
    AllBs := [];
    for pair in pairs do
        Append(~AllAs, Ai(pair));
        Append(~AllBs, Bj(pair));
    end for;
    return Log(BoundFromAisBjs(AllAs, AllBs));
end function;

// A bound on the naive height of quadratic torsion for the jacobian
// of the curve defined by the polynomial f.
function HeightBound(f)
    return 8/3*Log(2)-4*Log(Content(f)) + 2/3*Log(Discriminant(f)) + 2/3*InfiniteContribution(f);
end function;


// Given a the first mumford coordinate (x^2 + alpha*x+beta), recover the 
// possible second coordinates which satisfy a curve C: Y^2 = f(X)
function HeightBound(f)
    return 8/3*Log(2)-4*Log(Content(f)) + 2/3*Log(Abs(Discriminant(f))) + 2/3*InfiniteContribution(f);
end function;


// Given a the first mumford coordinate (x^2 + alpha*x+beta), recover the possible second coordinates which satisfy
// a curve C: Y^2 = f(X)
function ComputeGammaDelta(alpha, beta, C)
    // ensure we have Y^2 = f(X)
    C := SimplifiedModel(C);

    // we will compute the x-coords in the quadratic extension in which they live.
    disc := alpha^2 -4*beta;
    
    R<w> := PolynomialRing(Rationals());
    t := w^2 - disc;
    if IsIrreducible(t) then
        K1 := ext<QNF() | t>;
    else
        K1 := QNF();
    end if;
    R<w> := PolynomialRing(K1);
    t := w^2 - disc;
    sqrt_disc := Evaluate(Factorization(t)[1][1], 0);
    x1 := (-alpha + sqrt_disc)/2;
    x2 := (-alpha - sqrt_disc)/2;

    // Now we want to compute the y-coords. They are sqrt(f(x)), so first we compute f(x)
    S<x,y,z> := PolynomialRing(K1,3);
    def_poly := S!DefiningPolynomial(C);
    fx1 := Evaluate(-def_poly, [x1, 0, 1]);
    fx2 := Evaluate(-def_poly, [x2, 0,1]);

    // We need additional quadratic extensions to get sqrt(f(x)):
    P<a> := PolynomialRing(K1);
    g1 := a^2 - fx1;
    
    if IsIrreducible(g1) then
        L1<y1> := ext<K1 | g1>;
    else
        L1 := K1;
        y1 := Evaluate(Factorization(g1)[1][1], 0);
    end if;
    Q<b> := PolynomialRing(L1);
    g2 := b^2 - fx2;
    // if needed, take another extension to get sqrt(fx2)
    if IsIrreducible(g2) then
        L2<y2> := ext<L1 | g2>;
    else
        L2 := L1;
        y2 := Evaluate(Factorization(g2)[1][1], 0);
    end if;

    // deal with the case where the discriminant is zero and we have a repeated root:
    if disc eq 0 then
        f := HyperellipticPolynomials(C);
        fprime := Derivative(f);
        gamma := Evaluate(fprime, x1)/(2*y1);
        delta := -gamma*x1+y1;
        return [<gamma, delta>];
    end if;
        
    
    gamma1 := (y1-y2)/(x1-x2);
    delta1 := -gamma1*x1 + y1;
    gamma2 := (y1 + y2)/(x1-x2);
    delta2 := -gamma2*x1 + y1;
//    gamma3 := (-y1-y2)/(x1-x2); // this is just the inverse of (gamma2, delta2)
//    delta3 := -gamma3*x1 - y1;
//    gamma4 := (-y1 + y2)/(x1-x2); // this is just the inverse of (gamma1, delta1)
//    delta4 := -gamma4*x1 - y1;
// because we can recover the last two possibilities from the first two, we omit them.
// they are written in comments for you, dear reader
    
    return [<gamma1, delta1>, <gamma2, delta2>];
end function;

function ComputeGammaDegreeOne(alpha, C)
// ensure we have Y^2 = f(X)
    C := SimplifiedModel(C);
    P<x,y,z> := PolynomialRing(Rationals(),3);
    def_poly := P!DefiningPolynomial(C);
    fx := Evaluate(-def_poly, [alpha, 0, 1]);
    S<t> := PolynomialRing(Rationals());
    g := t^2 - fx;
    if IsIrreducible(g) then
        K := ext<QNF() | g>;
        Q<a> := PolynomialRing(K);
        g2 := Q!g;
        gamma := Roots(g2)[1][1];
        gamma_rat := Rationals()!(gamma/K.1);
        gamma_quad := Rationals()!(K.1^2);
    else
        gamma := Roots(g)[1][1];
        gamma_rat := gamma;
        gamma_quad := 1;
    end if;
    return gamma, gamma_rat, gamma_quad;
end function;

// Helper function to find square-free components of integers:
function SqFreeFinder(int)
    if (int eq 0) then
        return 0;
    end if;

    prime_factors := {tuple[1] : tuple in Factorization(int) | tuple[2] mod 2 eq 1};

    positive_squarefree_part := 1;
    for prime in prime_factors do
        positive_squarefree_part := positive_squarefree_part * prime;
    end for;

    return Sign(int)*positive_squarefree_part;
end function;


    
// Given pt = <a, b, g, d> with abgd rational, tells whether 
// (u, v) = (x^2+ax+b, sqrt(dee)*(gx+d)) is a 5-torsion point on the curve C
// OR takes pt = <a, b> with ab rational and tells whether
// (u, v) = (x-a, sqrt(d)*b) is a 5-torsion point
function Is5Torsion(pt, dee, C)
    _<x> := PolynomialRing(Rationals());
    K<sqrtdee> := NumberField(x^2-dee);
    Kx<xK> := PolynomialRing(K);
    CK := ChangeRing(C, K);
    JK := Jacobian(CK);
    
    if #pt eq 4 then
        a := pt[1];
        b := pt[2];
        g := pt[3];
        d := pt[4];

        // See if 5*pt is Id, with the understanding that coersion may fail
        try
            return 5 * (JK ! [xK^2 + a*xK + b, sqrtdee*(g*xK + d)]) eq Id(JK);
        catch e
            return false;
        end try;
    elif #pt eq 2 then
        a := pt[1];
        b := pt[2];
        
        // See if 5*pt is Id, with the understanding that coersion may fail
        try
            return 5 * (JK ! [xK - a, sqrtdee*b]) eq Id(JK);
        catch e
            return false;
        end try;
    end if;
    return false;
end function;

// Given some points on a hyperelliptic curve Y^2 = f(X), recovers the mumford coordinates of the points
// The parameter epsilon is a floating point thing to check when two floats are in fact equal.
MumfordFromCoords := function(points, f, epsilon)
    if #points eq 2 then // degree 2 divisor
        x1 := points[1][1];
        y1 := points[1][2];
        x2 := points[2][1];
        y2 := points[2][2];

        alpha := -(x1 + x2);
        beta := x1*x2;

        if Abs(x1 - x2) lt epsilon then
            fprime := Derivative(f);
            gamma := Evaluate(fprime, x1) / (2*y1);
            delta := y1 - gamma * x1;
        else
            gamma := (y2-y1)/(x2-x1);
            delta := (y1*x2-y2*x1)/(x2-x1);
        end if;

        return <alpha, beta, gamma, delta>;
    elif #points eq 1 then // degree 1 divisor, (u, v) = (x-x1, y1)
        return points[1];  
    end if;
    
    fprintf std_err, "MumfordFromCoords recieved %o points\n", #points;
    return <>;
end function;

// A hueristic choice for how much precision to use
function Precision(h)
    return Minimum(MIN_PRECISION, Ceiling(10*h/Log(10)));
end function;

// Algorithm 6
// Note: we can't actually return maybe as a possibility. As such, we'll write the outputs as strings rather than booleans
function SimpleQuadTorsFinder(C, frob_poly_list)
    existence, possibilities := ImpossibleQuadraticTorsion(C, frob_poly_list);
    // recall existence is a boolean which is true if simple quadratic torsion is impossible
    if existence then
        return "false";
    end if;
    C := SimplifiedModel(C);
    f := HyperellipticPolynomials(C);
    h := HeightBound(f);
    num_digits := Precision(h);
    CF<i> := ComplexField(num_digits);
    Cx := PolynomialRing(CF);

    A := AnalyticJacobian(Cx!f);
    M := BigPeriodMatrix(A);
    v1 := Matrix(CF, 2, 1, [M[1][1],M[2][1]]);
    v2 := Matrix(CF, 2, 1, [M[1][2],M[2][2]]);
    v3 := Matrix(CF, 2, 1, [M[1][3],M[2][3]]);
    v4 := Matrix(CF, 2, 1, [M[1][4],M[2][4]]);

    line_reps := MakeLineReps(4,5);
    all_torsion := [LinearCombo([v1, v2, v3, v4], line_reps[j], 5) : j in [1..156]];
    algebraic_torsion_points := [**];
    for pt in all_torsion do
        try 
            Append(~algebraic_torsion_points, FromAnalyticJacobian(pt, A));
        catch e 
            // This sometimes resovles errors related to numerical stability
            Append(~algebraic_torsion_points, FromAnalyticJacobian(2*pt, A));
        end try;
    end for;

    good_torsion := [];

    for point in algebraic_torsion_points do
        // degree 1 case:
        if #point eq 1 then
            alpha := MumfordFromCoords(point, f, 1/(2*Exp(2*h)))[1];
            approx_alpha := NearlyRational(alpha, Exp(h));
            if (#approx_alpha eq 0) then // check that we have rational approximations
                continue;
            end if;
            // if we do, replace alpha and beta with their approximations
            alpha := approx_alpha[1];
            gamma, rational_part_gamma, quad_part_gamma := ComputeGammaDegreeOne(alpha, C);
            if quad_part_gamma eq 1 then // this means we have a rational 5-torsion point
                continue;
            end if;
            Append(~good_torsion,<alpha, rational_part_gamma,quad_part_gamma>);
            continue;
        end if;

        //else we have the degree 2 case
        mumford := MumfordFromCoords(point, f, 1/(2*Exp(2*h)));
        alpha := mumford[1];
        beta := mumford[2];
        approx_alpha := NearlyRational(alpha, Exp(h));
        approx_beta := NearlyRational(beta, Exp(h));
        
        if (#approx_alpha eq 0) or (#approx_beta eq 0) then // check that we have rational approximations
            continue;
        end if;
        // if we do, replace alpha and beta with their approximations
        alpha := approx_alpha[1];
        beta := approx_beta[1];

        upoints := ComputeGammaDelta(alpha, beta, C);
        
        for candidate in upoints do
            minpoly_gamma := MinimalPolynomial(candidate[1]^2, Rationals()); // second argument ensures that the minpoly is over Q
            minpoly_delta := MinimalPolynomial(candidate[2]^2, Rationals());
            // if gamma and delta are of the form a*sqrt(d), then squaring (as we did above) gives a rational and its minpoly will be degree 1
            // this is why we have the check below

            if (Degree(minpoly_gamma) gt 1) or (Degree(minpoly_delta) gt 1) then
                continue;
            end if;
            // we'll extract the values of gamma and delta by squaring them and then finding the quadratic piece by taking the square-free component
            sq_gamma_num := Numerator(Rationals()!(candidate[1]^2));
            sq_gamma_denom := Denominator(Rationals()!(candidate[1]^2));
            sq_delta_num := Numerator(Rationals()!(candidate[2]^2));
            sq_delta_denom := Denominator(Rationals()!(candidate[2]^2));
            quad_part_gamma := SqFreeFinder(sq_gamma_num * sq_gamma_denom); // these two lines let us write gamma = r*sqrt(d) and delta = r'*sqrt(d')
            quad_part_delta := SqFreeFinder(sq_delta_num * sq_delta_denom); // for rational r and r' and integer d and d'

            // we require that d = d' else we'll toss it out
            // note we need to allow the case where one of gamma or delta is 0
            if not(quad_part_gamma eq quad_part_delta) and not(quad_part_gamma*quad_part_delta eq 0) then 
                continue;
            // we also ignore if gamma and delta are rational, (corresponding to quadratic parts both being
            elif ((quad_part_gamma eq 1) or (quad_part_gamma eq 0)) and ((quad_part_delta eq 1) or (quad_part_delta eq 0)) then
                continue;
            end if;

            if quad_part_delta eq 0 then
                quad_part := quad_part_gamma;
            elif quad_part_gamma eq 0 then
                quad_part := quad_part_delta;
            else
                quad_part := quad_part_gamma;
            end if;

            if quad_part in possibilities then
                _, rational_part_gamma := IsSquare(Rationals()!(candidate[1]^2/quad_part));
                sign_matcher := Rationals()!(candidate[1]*candidate[2]/quad_part);
                if sign_matcher ge 0 then
                    _, rational_part_delta := IsSquare(Rationals()!(candidate[2]^2/quad_part));
                else
                    _, rational_part_delta := IsSquare(Rationals()!(candidate[2]^2/quad_part));
                    rational_part_delta := -rational_part_delta;
                end if;
                Append(~good_torsion, <alpha, beta, rational_part_gamma, rational_part_delta, quad_part>);
            end if;
        end for;
    end for;

    // Now we want to verify that the "good torsion" is in fact 5-torsion by explicitly computing
    for point in good_torsion do
        //print(point);
        if #point eq 3 then // this is the degree 1 case
            if Is5Torsion(<point[1], point[2]>, point[3], C) then
                return "true";
            end if;
        end if;
        // else we have the degree 2 case
        if Is5Torsion(<point[1], point[2], point[3], point[4]>, point[5], C) then
            return "true";
        end if;
    end for;
return "maybe";
end function;

////////////////////////////// IMAGING ///////////////////////////////////

// Image of galois        Users must pass the dictionary in to save compute if trying several curves/primes

ImageByFroblist := function(L, dict, C)
    // First run the curve through smalljac:
    C, _ := SimplifiedModel(C);
    frobs := RunSmalljac(C, PRIMES_UPPER_LIMIT);
        
    // Removes the first line of the smalljac file which simply contains curve info
    Remove(~frobs, 1);

    possibilities := chidambaram_allowed;

    ////////////////////////////// Compute local information //////////////////////////////

    // Computing the distribution of (characteristic polynimial, dim 1-eigenspace)
    invariant_counts := {**};

    S<x> := PolynomialRing(IntegerRing(5));
    for i->elt in frobs do
        // first check the characteristic polynomial
        frobpoly := Split(elt, ",");
        if #frobpoly eq 2 then
            assert frobpoly[2] eq "?"; //missing data, bad prime
            continue;
        end if;
        p := eval frobpoly[1];
        if p lt PRIMES_LOWER_LIMIT then
            continue;
        end if;
        ap := eval frobpoly[2];
        bp := eval frobpoly[3];
        
        frob_poly := S![p^2, p*ap, bp, ap, 1];

        // Now we check the dimension of the 1-eigenspace
        dim_one_eigenspace := OneSubspaceDim(p, C, 5, frob_poly);

        invariants := <frob_poly, dim_one_eigenspace>;
        
        // Intersect its dictionary entry with possibilities list
        possibilities := possibilities meet dict[invariants];
        // If only one possibility, return surjective
        if #possibilities eq 1 then
            return "1.1.1";
        end if;

        // Add invariant tuple to count
        Include(~invariant_counts,invariants);
    end for;

    possibilities := possibilities diff {"1.1.1"};
    best_p := 2;
    best_subgroups := [];

    // if non-surjective, compare empirical and actual distributions of (characteristic polynimial, dim 1-eigenspace)
    for index in possibilities do
        test_stat := SquareDifference(invariant_counts, InvariantSpectrum(L[index]`subgroup));
        if Abs(test_stat - best_p) lt 0.001 then
            Append(~best_subgroups, index);
        elif test_stat lt best_p then
            best_p := test_stat;
            best_subgroups := [index];
        end if;
    end for;

    ////////////////////////////// Compute global information //////////////////////////////

    // filter isomorphic non-conjugage subgroups by presence or absence of rational 5-torsion
    if (#TorsionSubgroup(Jacobian(C))) mod 5 eq 0 then
        best_subgroups := {sg : sg in best_subgroups | HasRationalTorsion(sg)};
        best_subgroups;
    else
        best_subgroups := {sg : sg in best_subgroups | not(HasRationalTorsion(sg))};

        // filter isomorphic non-conjugage subgroups by presence or absence of simple-quadratic 5-torsion
        num_with_quadratic := #{sg : sg in best_subgroups | HasQuadraticTorsion(sg,5)};
        // check if computing quadratic five-torsion will yield useful information
        if num_with_quadratic gt 0 and num_with_quadratic lt #best_subgroups then 
            // compute the candidate ds for the quadratic extensions Q(\root{d})
            try
                QuadTorsPresence := SimpleQuadTorsFinder(C, frobs);
            catch e
                fprintf std_err, "FAJ or something errored on %o\n", C;
                fprintf std_err, "%o\n", e;
                QuadTorsPresence := "maybe";
            end try; // FromAnalyticJacobian errors sometimes, in this case increase the precision of the complex field
            if (QuadTorsPresence eq "false") then
                best_subgroups := {sg : sg in best_subgroups | not(HasQuadraticTorsion(sg,5))};
            elif (QuadTorsPresence eq "true") then
                best_subgroups := {sg : sg in best_subgroups | HasQuadraticTorsion(sg,5)};
            end if;
                // note: QuadTorsPresence is a pseudo-Boolean which could be "maybe" in which case the set "best_subgroups" is
                // not altered
        end if;
    end if;

    return best_subgroups;
end function;
